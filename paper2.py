"""
	- Figure 1: Observations at 3mm, 1.3mm, 7mm & 18mm.
	- Figure 2: Dust opacities for different comp and size.
	- Figure 3: Horizontal cuts for different amax and lambda.
	- Figure 4: Observed and modelled spectral indices.
	- Figure 5: Fluxes for the best match of Figure 4. 
    Figsize two-column: 18cm x 5.5cm = 3*2.36in x 2.17in
"""
import os
import warnings
import numpy as np
import matplotlib.pyplot as plt
import astropy.units as u
import astropy.constants as c
from astropy.io import ascii, fits
from astropy.coordinates import SkyCoord
from astropy.nddata.blocks import block_reduce
from pathlib import Path

import utils

home = Path.home()

# Plot directory
plot_dir = home/"phd/plots/paper2"

# Ignore all warnings, usually generated by APLPy
warnings.filterwarnings('ignore')

# Global plot settings
scalebar = 20*u.au
cmap = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3','#a6d854','#ffd92f']
cmap = ['#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00']
cmap = cmap[::-1]


@utils.elapsed_time
def plot_observations(
    polarization=True, horizontal_layout=True, show=True, savefig=None):
    """ Figure 1 """

    if horizontal_layout:
        figsize = (19,6)
        x = [0.08, 0.32, 0.55, 0.78]
        y = [0.05, 0.05, 0.05, 0.05]
        dx = 0.2
        dy = 0.9 
    else:
        figsize = (6, 19)
        x = [0.01, 0.01, 0.01, 0.01]
        y = [0.78, 0.55, 0.31, 0.08]
        dx = 0.9
        dy = 0.2 

    fig = plt.figure(figsize=figsize)

    f1 = utils.plot_map(
        home/f'phd/observations/iras16293/band6/sourceB_1.3mm.fits',
        figsize=None,
        stretch='linear', 
        scalebar=None, 
        vmin=0, 
        vmax=287, 
        contours=False, 
        bright_temp=True, 
        figure=fig,
        subplot=[x[0], y[0], dx, dy], 
    )
    f2 = utils.plot_map(
        home/f'phd/observations/iras16293/band3/sourceB_3mm.fits',
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        vmin=0, 
        vmax=468, 
        contours=False, 
        bright_temp=True, 
        figure=fig,
        subplot=[x[1], y[1], dx, dy], 
    )
    f3 = utils.plot_map(
        #home/f'phd/observations/iras16293/bandQ/stokes_I_zoom.fits', 
        home/f'phd/observations/iras16293/bandKa/stokes_I_zoom.fits', 
        figsize=None, 
        stretch='linear',
        scalebar=None,
        vmin=0, 
        #vmax=150, 
        vmax=470, 
        bright_temp=True, 
        figure=fig,
        subplot=[x[2], y[2], dx, dy], 
    )
    f4 = utils.plot_map(
        home/f'phd/observations/iras16293/bandKu/stokes_I_zoom_rob0.fits', 
        figsize=None, 
        stretch='linear',
        scalebar=scalebar,
        vmin=0, 
        vmax=300, 
        bright_temp=True, 
        figure=fig,
        subplot=[x[3], y[3], dx, dy], 
    )

    # Remove degenerated axes
    utils.dropdeg(f1)
    utils.dropdeg(f2)
    
    # Add polarization vectors for Band Q
    if polarization:
        vec_scale = 60
        pol_label = 1 / 30
        f1.show_vectors(
            str(home/"phd/observations/iras16293/band6/sadavoy/per_zoom_recenter_masked.fits"), 
            str(home/"phd/observations/iras16293/band6/sadavoy/pa_zoom_recenter.fits"), 
            step=1,
            scale=vec_scale,
            rotate=0,
            color='cyan',
            linewidth=1, 
            units='degrees', 
            layer="pol_vectors",
        )
        f3.show_vectors(
            str(home/"phd/observations/iras16293/bandQ/per_zoom.fits"), 
            str(home/"phd/observations/iras16293/bandQ/pa_zoom.fits"), 
            step=6, 
            scale=vec_scale,
            rotate=0,
            color='cyan',
            linewidth=1, 
            units='degrees', 
            layer="pol_vectors",
        )

    # Zoom in the images
    distance = 141
    model_angular_size = 120*u.au.to(u.pc) / distance
    model_angular_size = 250*u.au.to(u.pc) / distance
    img_radius = (model_angular_size/2)*u.rad.to(u.deg)

    f1.recenter(coord.ra.value, coord.dec.value, radius=img_radius)
    f2.recenter(coord.ra.value, coord.dec.value, radius=img_radius)

    coord = SkyCoord(ra='16h32m22.615s', dec='-24d28m32.6s')
    f3.recenter(coord.ra.value, coord.dec.value, radius=img_radius)
    f4.recenter(coord.ra.value, coord.dec.value, radius=img_radius)
    
    
    # Add a polarization scale bar
    if polarization:
        f1.add_scalebar(vec_scale * pol_label * (0.06 * u.arcsec.to(u.deg)))
        f3.add_scalebar(vec_scale * pol_label * (0.06 * u.arcsec.to(u.deg)))
        f1.scalebar.set_corner("bottom")
        f3.scalebar.set_corner("bottom right")
        f1.scalebar.set_font(size=15)
        f3.scalebar.set_font(size=15)
        f1.scalebar.set_linewidth(1)
        f3.scalebar.set_linewidth(1)
        f1.scalebar.set_label(f'{int(vec_scale * pol_label)}\%')
        f3.scalebar.set_label(f'{int(vec_scale * pol_label)}\%')
        f1.scalebar.set(linecolor='cyan')
        f1.scalebar.set_color('cyan')
        f3.scalebar.set_color('cyan')

    # Customize all panels
    for f in [f1, f2, f3, f4]:
        if polarization: f.scalebar.set_color('white')
        f.ticks.set_color('white')
        f.ticks.set_length(7)
        f.ticks.set_linewidth(2)
        f.add_beam(edgecolor='white', facecolor='none', linewidth=1)
        f.axis_labels.set_xtext('Right Ascension (J2000)')
        f1.axis_labels.set_ytext('Declination (J2000)')
        f.axis_labels.show()
        if not horizontal_layout:
            f.colorbar.set_location('right')

    for f in [f2,f3,f4]:
        f.tick_labels.hide_y()
        f.axis_labels.hide_y()

    # Add the beam of the band 6 polarized data
    if polarization:
        f1.remove_beam(0)
        f1.remove_beam(1)
        f1.add_beam()
        f1.add_beam()
        f1.beam[0].set(edgecolor='white', facecolor='none', linewidth=1)
        f1.beam[0].set_major(0.11*u.arcsec.to(u.deg))
        f1.beam[0].set_minor(0.07*u.arcsec.to(u.deg))
        f1.beam[0].set_angle(-88.21)

        f1.beam[1].set(edgecolor='cyan', facecolor='none', linewidth=1)
        f1.beam[1].set_corner('bottom right')
        f1.beam[1].set_major(0.25*u.arcsec.to(u.deg))
        f1.beam[1].set_minor(0.18*u.arcsec.to(u.deg))
        f1.beam[1].set_angle(80.28)

        # Add the beam of the band Q polarized data
        f3.remove_beam(0)
        f3.remove_beam(1)
        f3.add_beam()
        f3.add_beam()
        f3.beam[0].set(edgecolor='white', facecolor='none', linewidth=1)
        f3.beam[0].set_major(0.39*u.arcsec.to(u.deg))
        f3.beam[0].set_minor(0.25*u.arcsec.to(u.deg))
        f3.beam[0].set_angle(73.75)

        f3.beam[1].set(edgecolor='cyan', facecolor='none', linewidth=1)
        f3.beam[1].set_corner('bottom right')
        f3.beam[1].set_major(0.11*u.arcsec.to(u.deg))
        f3.beam[1].set_minor(0.05*u.arcsec.to(u.deg))
        f3.beam[1].set_angle(-22.48)

    # Label each panel
    f1.add_label(0.95, 0.88, r'ALMA 1.3mm', relative=True, layer='band', 
        color='white', size=21, ha='right')
    f2.add_label(0.95, 0.88, r'ALMA 3mm', relative=True, layer='band', 
        color='white', size=21, ha='right')
    f3.add_label(0.05, 0.88, r'VLA 7mm', relative=True, layer='band', 
        color='cyan', size=21, ha='left')
    f3.add_label(0.95, 0.88, r'VLA 9mm', relative=True, layer='band', 
        color='white', size=21, ha='right')
    f4.add_label(0.95, 0.88, r'VLA 18mm', relative=True, layer='band', 
        color='white', size=21, ha='right')

    # Add each FITS-sub-figure to the main figure 
    fig.f1 = f1
    fig.f2 = f2
    fig.f3 = f3

    return utils.plot_checkout(fig, show, savefig=savefig, path=plot_dir)


def plot_disk_model(show=True, savefig=None, figsize=(6, 6)):
    """ Figure 2 """
    from matplotlib.colors import LogNorm
    
    # Read the data
    dens = fits.getdata(
        home/'phd/radmc3d/rhd_disk/grid/cartesian/density_3d.fits')
    temp = fits.getdata(
        home/'phd/radmc3d/rhd_disk/grid/cartesian/temperature_3d.fits')

    sizeau = 100
    ncells = dens.shape[0]
    midplane = ncells // 2
    dens = dens * 100
    dens = {'faceon': dens[..., midplane].T, 'edgeon': dens[:, midplane, :].T}
    temp = {'faceon': temp[..., midplane].T, 'edgeon': temp[:, midplane, :].T}

    # Define the pixel size in physical units
    dx = 100 / ncells
    dx_unit = 'AU'
    
    # Params for the GridSpec
    gridspec = {
        'height_ratios': [4,2], 
        'width_ratios': [1],
    }

    # Setup the figure
    fig, p = plt.subplots(nrows=2, ncols=1, figsize=figsize, gridspec_kw=gridspec)

    # Set the plot scales
    density_ticks = [1e-15, 1e-14, 1e-13, 1e-12, 1e-11, 1e-10]
    temperature_ticks = [100, 500, 1000]

    plt.rcParams['image.interpolation'] = 'bicubic'

    # Plot the maps
    df = p[0].imshow(dens['faceon'], norm=LogNorm(vmin=1e-15, vmax=2e-10), cmap='BuPu')
    te = p[1].imshow(temp['edgeon'], norm=LogNorm(vmin=100, vmax=1400), cmap='inferno')
    
    # Add colorbars
    df_cb = fig.colorbar(df, ax=p[0], pad=0.01, orientation='vertical', 
        ticks=density_ticks, use_gridspec=True)
    te_cb = fig.colorbar(te, ax=p[1], pad=0.01, orientation='vertical', 
        ticks=temperature_ticks, use_gridspec=True, aspect=5)

    df_cb.set_label(r'$\rho\,_{\rm gas}$ (g cm$^{-3}$)')
    te_cb.set_label(r'$T_{\rm gas}$ (K)')

    # Set the axes scales and labels 
    tick_pars = {
        'axis': 'both',
        'colors': 'white', 
        'direction': 'in', 
        'which': 'both', 
        'bottom': True,
        'top': True, 
        'left': True, 
        'right': True,
    }
    p[0].set_xticks([])
    p[1].set_xticks([])
    p[0].set_yticks([0, 99, 198, 297, 400])
    p[1].set_yticks([0, 24, 49, 74, 99])
    p[0].set_yticklabels(['', f'{100*dx:.0f}', '0', f'{-100*dx:.0f}', ''])
    p[1].set_yticklabels(['', f'{25*dx:.0f}', '0', f'{-25*dx:.0f}', ''])
    p[0].yaxis.set_label_position('left')
    p[1].yaxis.set_label_position('left')
    p[0].set_ylabel(f'{dx_unit}')
    p[1].set_ylabel(f'{dx_unit}')

    # Adjust the subplots
    plt.subplots_adjust(hspace=0.03)

    return utils.plot_checkout(fig, show, savefig, path=home/'phd/plots/paper2/')


@utils.elapsed_time
def plot_opacities(add_albedo=False, show=True, savefig='', figsize=(16, 5)):
    """ Figure 2
        Dust opacities. One panel for each components and for the mixture. 
        Includes scattering, absorption and extinction opacities
        for amax 10, 100 and 1000um.     
     """

    # Avoid pylab to open a new figure for every call to horizontal_cut()
    plt.rcParams['interactive'] = False

    # Set the common origin path for all data results
    path = home/'phd/radmc3d/opacities/'

    # Read the opacities for different amax
    a10um_s = utils.plot_opacity(f'{path}/dustkappa_s-a10um.inp', 
        return_data=True)
    a100um_s = utils.plot_opacity(f'{path}/dustkappa_s-a100um.inp', 
        return_data=True)
    a1000um_s = utils.plot_opacity(f'{path}/dustkappa_s-a1000um.inp', 
        return_data=True)
    a10um_sg = utils.plot_opacity(f'{path}/dustkappa_sg-a10um.inp', 
        return_data=True)
    a100um_sg = utils.plot_opacity(f'{path}/dustkappa_sg-a100um.inp', 
        return_data=True)
    a1000um_sg = utils.plot_opacity(f'{path}/dustkappa_sg-a1000um.inp', 
        return_data=True)
    a10um_sgo = utils.plot_opacity(f'{path}/dustkappa_sgo-a10um-50org.inp', 
        return_data=True)
    a100um_sgo = utils.plot_opacity(f'{path}/dustkappa_sgo-a100um-50org.inp', 
        return_data=True)
    a1000um_sgo = utils.plot_opacity(f'{path}/dustkappa_sgo-a1000um-50org.inp', 
        return_data=True)

    # Close all previously generated figures
    plt.close('all')
    
    # Generate a new figure
    fig, p = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=figsize)

    cmap = ['#66c2a5','#fc8d62','#8da0cb']
    cmap = ['#1b9e77','#d95f02','#7570b3']

    # Linestyles for kappa_abs, sca, ext
    ls = ['--', ':', '-']
    
    # Plot ghost lines for each amax to be added to the legend
    p[0].loglog([], [], ls=ls[1], color='black', label=r'$\kappa^{\rm sca}$')
    p[0].loglog([], [], ls=ls[0], color='black', label=r'$\kappa^{\rm abs}$')
    p[0].loglog([], [], ls=ls[2], color='black', label=r'$\kappa^{\rm ext}$')
    p[1].loglog([], [], ls=ls[1], color='black', label=r'$\kappa^{\rm sca}$')
    p[1].loglog([], [], ls=ls[0], color='black', label=r'$\kappa^{\rm abs}$')
    p[1].loglog([], [], ls=ls[2], color='black', label=r'$\kappa^{\rm ext}$')
    p[2].loglog([], [], ls=ls[1], color='black', label=r'$\kappa^{\rm sca}$')
    p[2].loglog([], [], ls=ls[0], color='black', label=r'$\kappa^{\rm abs}$')
    p[2].loglog([], [], ls=ls[2], color='black', label=r'$\kappa^{\rm ext}$')
    
    # First panel: amax10um
    p[0].loglog(a10um_s['lam'], a10um_s['abs'], color=cmap[0], ls=ls[0])
    p[0].loglog(a10um_s['lam'], a10um_s['sca'], color=cmap[0], ls=ls[1])
    p[0].loglog(a10um_s['lam'], a10um_s['ext'], color=cmap[0], label=r'Sil')
    p[0].loglog(a10um_sg['lam'], a10um_sg['abs'], color=cmap[1], ls=ls[0])
    p[0].loglog(a10um_sg['lam'], a10um_sg['sca'], color=cmap[1], ls=ls[1])
    p[0].loglog(a10um_sg['lam'], a10um_sg['ext'], color=cmap[1], label=r'Sil:Gra')
    p[0].loglog(a10um_sgo['lam'], a10um_sgo['abs'], color=cmap[2], ls=ls[0])
    p[0].loglog(a10um_sgo['lam'], a10um_sgo['sca'], color=cmap[2], ls=ls[1])
    p[0].loglog(a10um_sgo['lam'], a10um_sgo['ext'], color=cmap[2], label=r'Sil:Gra:Org')
    
    # Second panel: amax100um
    p[1].loglog(a100um_s['lam'], a100um_s['abs'], color=cmap[0], ls=ls[0])
    p[1].loglog(a100um_s['lam'], a100um_s['sca'], color=cmap[0], ls=ls[1])
    p[1].loglog(a100um_s['lam'], a100um_s['ext'], color=cmap[0], label=r'Sil')
    p[1].loglog(a100um_sg['lam'], a100um_sg['abs'], color=cmap[1], ls=ls[0])
    p[1].loglog(a100um_sg['lam'], a100um_sg['sca'], color=cmap[1], ls=ls[1])
    p[1].loglog(a100um_sg['lam'], a100um_sg['ext'], color=cmap[1], label=r'Sil:Gra')
    p[1].loglog(a100um_sgo['lam'], a100um_sgo['abs'], color=cmap[2], ls=ls[0])
    p[1].loglog(a100um_sgo['lam'], a100um_sgo['sca'], color=cmap[2], ls=ls[1])
    p[1].loglog(a100um_sgo['lam'], a100um_sgo['ext'], color=cmap[2], label=r'Sil:Gra:Org')

    # Third panel: amax1000um
    p[2].loglog(a1000um_s['lam'], a1000um_s['abs'], color=cmap[0], ls=ls[0])
    p[2].loglog(a1000um_s['lam'], a1000um_s['sca'], color=cmap[0], ls=ls[1])
    p[2].loglog(a1000um_s['lam'], a1000um_s['ext'], color=cmap[0], label=r'Sil')
    p[2].loglog(a1000um_sg['lam'], a1000um_sg['abs'], color=cmap[1], ls=ls[0])
    p[2].loglog(a1000um_sg['lam'], a1000um_sg['sca'], color=cmap[1], ls=ls[1])
    p[2].loglog(a1000um_sg['lam'], a1000um_sg['ext'], color=cmap[1], label=r'Sil:Gra')
    p[2].loglog(a1000um_sgo['lam'], a1000um_sgo['abs'], color=cmap[2], ls=ls[0])
    p[2].loglog(a1000um_sgo['lam'], a1000um_sgo['sca'], color=cmap[2], ls=ls[1])
    p[2].loglog(a1000um_sgo['lam'], a1000um_sgo['ext'], color=cmap[2], label=r'Sil:Gra:Org')

    p[0].legend(ncol=2, loc='lower left', fontsize=13)
    p[1].legend(ncol=2, loc='lower left', fontsize=13)
    p[2].legend(ncol=2, loc='lower left', fontsize=13)

    # Add the Albedo
    if add_albedo:
        albedo_10 = a10um_sg['sca'] / a10um_sg['ext']
        albedo_100 = a100um_sg['sca'] / a100um_sg['ext']
        albedo_1000 = a1000um_sg['sca'] / a1000um_sg['ext']

        p[0].annotate('Albedo', xy=(0.3, 0.8), color='black', alpha=0.8)
        p[0].loglog(a10um_sg['lam'], albedo_10, color='black', alpha=0.3, zorder=-1)
        p[1].loglog(a100um_sg['lam'], albedo_100, color='black', alpha=0.3, zorder=-1)
        p[2].loglog(a1000um_sg['lam'], albedo_1000, color='black', alpha=0.3, zorder=-1)

    # Illustrate the observing bands
    p[0].axvline(1.3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[0].axvline(3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[0].axvline(9e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[0].axvline(18e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[1].axvline(1.3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[1].axvline(3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[1].axvline(9e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[1].axvline(18e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[2].axvline(1.3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[2].axvline(3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[2].axvline(9e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[2].axvline(18e3, ls='-', color='grey', lw=0.5, alpha=0.6)

    p[0].text(1.3e3, 5e2, 'Band 6', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[0].text(3e3, 5e2, 'Band 3', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[0].text(9e3, 5e2, 'Band Ka', rotation=90, size=13, color='grey', \
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[0].text(18e3, 5e2, 'Band Ku', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[1].text(1.3e3, 5e2, 'Band 6', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[1].text(3e3, 5e2, 'Band 3', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[1].text(9e3, 5e2, 'Band Ka', rotation=90, size=13, color='grey', \
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[1].text(18e3, 5e2, 'Band Ku', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[2].text(1.3e3, 5e2, 'Band 6', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[2].text(3e3, 5e2, 'Band 3', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[2].text(9e3, 5e2, 'Band Ka', rotation=90, size=13, color='grey', \
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[2].text(18e3, 5e2, 'Band Ku', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 

    # Label each panel with the composition
    p[0].text(2e-1, 8e+0, r'$a_{\rm max}=10\mu$m', color='black', size=20, va='top')
    p[1].text(2e-1, 8e+0, r'$a_{\rm max}=100\mu$m', color='black', size=20, va='top')
    p[2].text(2e-1, 8e+0, r'$a_{\rm max}=1000\mu$m', color='black', size=20, va='top')

    p[0].set_xlabel('Wavelength (microns)', size=15)
    p[1].set_xlabel('Wavelength (microns)', size=15)
    p[2].set_xlabel('Wavelength (microns)', size=15)
    p[0].set_ylabel(r'Dust opacity $\kappa$ (cm$^2$\,g$^{-1}$)', size=15)

    p[0].set_xlim(1e-1, 3e4)
    p[1].set_xlim(1e-1, 3e4)
    p[2].set_xlim(1e-1, 3e4)
    p[0].set_ylim(1e-2, 1e4)
    p[1].set_ylim(1e-2, 1e4)
    p[2].set_ylim(1e-2, 1e4)

    plt.subplots_adjust(wspace=0)

    return utils.plot_checkout(fig, show, savefig, path=plot_dir)


def plot_horizontal_cuts(show=True, savefig='', figsize=(12, 10), sublimation=False):
    """ Figure 3 
        Plot horizontal cuts for all four bands for amax 10, 100 & 1000um.    
    """
    
    # Avoid pylab to open a new figure for every call to horizontal_cut()
    plt.rcParams['interactive'] = False

    # Set prefixes for sets of results
    prefix = home/'phd/radmc3d/rhd_disk/results/dust_emission/tgas/'

    # Call the real obs. data
    def cut_obs(lam):
        cut = utils.horizontal_cut(
            lam=lam, 
            cut_along='max',
            axis=0, 
            filename=None, 
            add_obs=True, 
            return_data=True, 
            show=False, 
            verbose=False,
        )
        plt.close()
        return cut 

    def cut_sim(a, l, org='', test=False):
        mat = Path(f"sgo/soot300K/{org}") if org != '' else Path("sg/")
        #t = {'1.3mm': 'alma', '3mm': 'alma', '7mm': 'vla', '18mm': 'vla'}
        t = {'1.3mm': 'alma', '3mm': 'alma', '9mm': 'synobs', '18mm': 'vla'}

        filename = prefix/mat/f'amax{a}/{l}/0deg/scat/{t[l]}_I.fits'

        if test:
            filename = prefix/mat/f'amax{a}/{l}/0deg/scat/array_A/synobs_I.fits'

        cut = utils.horizontal_cut(
            filename = filename, 
            add_obs=False, 
            cut_along='max',
            axis=0, 
            return_data=True, 
            show=False, 
            verbose=False,
        )
        plt.close()
        return cut

    # Generate the figure
    fig, p = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=figsize)

    cmap = ['#1b9e77','#d95f02','#7570b3']
    ls = {
        '10org' : (0, (5, 1)),
        '30org' : (0, (5, 4)),
        '50org' : (0, (5, 7)),
        '80org' : (0, (5, 10)),
    }
    pi = [p[0,0], p[0,1], p[1,0], p[1,1]]

    # Plot per wavelength, per amax and per percentage of organics
    #for i, lam in enumerate(['1.3mm', '3mm', '7mm', '18mm']):
    for i, lam in enumerate(['1.3mm', '3mm', '9mm', '18mm']):
        pi[i].plot(*cut_obs(lam=lam), ls='-', color='black', 
            label='IRAS 16293B')
        
        # Plot extended array test at 7mm
        for j, a in enumerate(['10um', '100um', '1000um']):
            pi[i].plot(*cut_sim(a, lam), ls='-', color=cmap[j], 
                label=f'{a.strip("um")}'+r'$\mu$m')

            if lam == '7mm':
                pi[i].plot(*cut_sim(a, lam, test=True), ls='--', color=cmap[j], 
                    label=f'{a.strip("um")}'+r'$\mu$m (Ant. Array A)')


            if sublimation:
                for k, org in enumerate(['10org', '30org', '50org', '80org']):
                    pi[i].plot(*cut_sim(a, lam, org), ls=ls[org], color=cmap[j],
                        label=f'{org.strip("org")}\% organics' if j == 0 else None)

    # Customize the figure
    #for i, lam in enumerate(['1.3mm', '3mm', '7mm', '18mm']):
    for i, lam in enumerate(['1.3mm', '3mm', '9mm', '18mm']):
        # Re-order the curve labels
        handles, labels = plt.gca().get_legend_handles_labels()
        order = [0, 1, 6, 7, 2, 3, 4, 5] if sublimation else range(4)
        pi[i].legend([handles[i] for i in order], [labels[i] for i in order], 
            ncol=1, loc='upper left', fontsize=12)

        # Add a scalebar for the sootline
        if sublimation:
            pi[i].annotate('Soot Line', xy=(0, 50), ha='center')
            pi[i].annotate('', xy=(-0.07, 30), xytext=(0.07, 30), 
                arrowprops=dict(arrowstyle='|-|', ls='--', mutation_scale=2.0))

        # Annotate the plot and set the label
        pi[i].set_ylabel(r'$T_{\rm B}$ (K)')
        pi[i].set_ylim(-10, 780)
        pi[i].annotate(lam, xy=(0.75, 0.85), xycoords="axes fraction", fontsize=20)
        pi[i].set_xlabel("Peak angular offset (arcseconds)")

    p[1,1].set_xlim(-0.33, 0.33)
    p[0,1].yaxis.tick_right()
    p[1,1].yaxis.tick_right()
    p[0,1].yaxis.set_label_position("right")
    p[1,1].yaxis.set_label_position("right")

    plt.subplots_adjust(hspace=0, wspace=0)

    return utils.plot_checkout(fig, show, savefig, path=plot_dir)


def plot_spectral_indexes(show=True, savefig='', figsize=(14, 9)):
    """ Figure 4
    """

    # Avoid pylab to open a new figure for every call to horizontal_cut()
    plt.rcParams['interactive'] = False

    # Initialize the figure 
    fig = plt.figure(figsize=figsize)

    # Set the path prefixes
    prefix2 = home/'phd/polaris/rhd_disk/results/snap541/dust_emission/temp_eos/sg/amax10um/'
    prefix3 = home/'phd/polaris/rhd_disk/evaporation_test/results/snap541/dust_emission' / \
                    'temp_eos/sgo/mix5/subl300K/amax10um/'
    prefix4 = home/'phd/polaris/rhd_disk/results/snap541/dust_emission/temp_eos/sg/amax100um/'
    prefix5 = home/'phd/polaris/rhd_disk/evaporation_test/results/snap541/dust_emission' / \
                    'temp_eos/sgo/mix5/subl300K/amax100um/'

    f1 = utils.plot_map(
        home/f'phd/observations/iras16293/sourceB_spectral_index_band3-6.fits',
        cmap='PuOr', 
        cblabel='Observed spectral index', 
        vmin=1.7, 
        vmax=3.5, 
        figsize=None, 
        stretch='linear',
        scalebar=scalebar,
        bright_temp=False, 
        figure=fig,
        subplot=[0.10, 0.25, 0.28, 0.43], 
        verbose=False,
    )
    f2 = utils.spectral_index(
        prefix2/f'1.3mm/0deg/scat/alma_I.fits', 
        prefix2/f'3mm/0deg/scat/alma_I_smoothed1.3mm.fits', 
        vmin=1.7, 
        vmax=3.5, 
        mask=0.006,
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        figure=fig,
        subplot=[0.40, 0.55, 0.28, 0.43], 
        savefile=prefix2/'spectral_index.fits', 
        return_fig=True, 
        show=False,
    )
    f3 = utils.spectral_index(
        prefix3/f'1.3mm/0deg/scat/alma_I.fits', 
        prefix3/f'3mm/0deg/scat/alma_I_smoothed1.3mm.fits', 
        vmin=1.7, 
        vmax=3.5, 
        mask=0.006,
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        figure=fig,
        subplot=[0.70, 0.55, 0.28, 0.43], 
        savefile=prefix3/'spectral_index.fits', 
        return_fig=True, 
        show=False,
    )
    f4 = utils.spectral_index(
        prefix4/f'1.3mm/0deg/scat/alma_I.fits', 
        prefix4/f'3mm/0deg/scat/alma_I_smoothed1.3mm.fits', 
        vmin=1.7, 
        vmax=3.5, 
        mask=0.006,
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        figure=fig,
        subplot=[0.40, 0.05, 0.28, 0.43], 
        savefile=prefix4/'spectral_index_flipped.fits', 
        return_fig=True, 
        show=False,
    )
    f5 = utils.spectral_index(
        prefix5/f'1.3mm/0deg/scat/alma_I.fits', 
        prefix5/f'3mm/0deg/scat/alma_I_smoothed1.3mm.fits', 
        vmin=1.7, 
        vmax=3.5, 
        mask=0.006,
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        figure=fig,
        subplot=[0.70, 0.05, 0.28, 0.43], 
        savefile=prefix5/'spectral_index_flipped.fits', 
        return_fig=True, 
        show=False,
    )

    # Zoom in the observed spectral index map
    model_angular_size = 100*u.au.to(u.pc) / 141
    img_radius = (model_angular_size/2)*u.rad.to(u.deg)
    coord = SkyCoord(ra='16h32m22.632s', dec='-24d28m31.8s')
    f1.recenter(coord.ra.value, coord.dec.value, radius=img_radius)
    f1.show_contour(colors="black", levels=[2])

    # Customize the axes ticks and labels
    for f in [f1,f2,f3,f4,f5]: 
        f.scalebar.set_color('black')
        f.add_beam(facecolor='none', edgecolor='black', linewidth=1)
        f.ticks.set_length(7)
        f.ticks.set_linewidth(2)
        if f is f1:
            f.axis_labels.set_xtext('Right Ascension (J2000)')
            f.axis_labels.set_ytext('Declination (J2000)')
            f.axis_labels.show()
        else:
            f.tick_labels.hide()
            f.axis_labels.hide()
            f.colorbar.hide()
    
    # Add titles to each figure
#    f3.set_title(r'Carbon sublimation above 300K', size=18)
#    f5.set_title(r'Carbon sublimation above 300K', size=18)
        
    # Annotate each figure
    f1.add_label(0.03, 0.92, r'ALMA', relative=True, size=22, \
        layer='alma', color='black', weight='bold', ha='left')
    f1.add_label(0.99, 0.94, r'$\alpha_{\rm 1.3-3\,mm}$', relative=True, \
        layer='amax', color='black', size=25, weight='bold', ha='right')

    f2.add_label(0.035, 0.93, r'$a_{\rm max}=10\mu$m', relative=True, size=18, \
        layer='amax', color='black', weight='bold', ha='left')

    f3.add_label(0.035, 0.93, r'$a_{\rm max}=10\mu$m',relative=True, size=18, \
        layer='amax', color='black', weight='bold', ha='left')
    f3.add_label(0.98, 0.93, r'C-sublimation', relative=True, size=18, \
        layer='disk', color='black', weight='bold', ha='right')

    f4.add_label(0.035, 0.93, r'$a_{\rm max}=100\mu$m', relative=True, size=18, \
        layer='amax', color='black', weight='bold', ha='left')

    f5.add_label(0.035, 0.93, r'$a_{\rm max}=100\mu$m', relative=True, size=18, \
        layer='amax', color='black', weight='bold', ha='left')
    f5.add_label(0.98, 0.93, r'C-sublimation', relative=True, size=18, \
        layer='disk', color='black', weight='bold', ha='right')

    # Add each FITS-sub-figure to the main figure 
    fig.f1 = f1
    fig.f2 = f2
    fig.f3 = f3
    fig.f4 = f4
    fig.f5 = f5

    return utils.plot_checkout(fig, show, savefig=savefig, path=plot_dir)


@utils.elapsed_time
def plot_self_scattering_models(source='radmc3d', show=True, savefig='', figsize=None):
    """ Plot model images of polarization by self-scattering.
        Plot Stokes I, Q, U of models from POLARIS and synthetic observations
        from ALMA Band 3 & 6 and VLA Band Q.
        src can be 'polaris' or 'obs'
    """

    # Avoid pylab to open a new figure for every call to horizontal_cut()
    plt.rcParams['interactive'] = False

    prefix = home/"phd/radmc3d/rhd_disk/results/dust_scattering/tgas/sg/amax100um/"

    # Set up the input source for filenames, plot grid and if clauses
    if source == 'radmc3d':
        # 4x2 grid: (I, Q, U, Pf) x (1mm, 7 mm)
        figsize = (15, 9) if figsize is None else figsize
        x = [0.0, 0.25, 0.50, 0.75]
        y = [0.52, 0.02]
        dx = 0.25
        dy = 0.40
        vmin_i = 0
        vmax_i = None
        vmin_q = -1
        vmax_q = 1
        vmin_u = -1
        vmax_u = 1
        vmin_pf = 0
        vmax_pf = 0.1
        rescale_i = 1e6
        rescale_q = 1
        rescale_u = 1
        rescale_pf = 100
        cblabel_i = r'$\mu$Jy/pixel'
        cblabel_q = r'x$10^{-12}$ Jy/pixel'
        cblabel_u = r'x$10^{-12}$ Jy/pixel'
        cblabel_pf = r'Polarization fraction (\%)'
    else:
        # 3x2 grid: (I, Q, U) x (1mm, 7 mm)
        figsize = (11, 9) if figsize is None else figsize
        x = [0.02, 0.355, 0.69]
        y = [0.52, 0.02]
        dx = 0.29
        dy = 0.40
        vmin_i = None
        vmax_i = None
        vmin_q = None
        vmax_q = None
        vmin_u = None
        vmax_u = None
        rescale_i = 1e3
        rescale_q = 1e6
        rescale_u = 1e6
        cblabel_i = 'mJy/beam'
        cblabel_q = r'$\mu$Jy/beam'
        cblabel_u = r'$\mu$Jy/beam'

    cmap_i = 'magma'
    cmap_q = 'RdBu'
    cmap_pf = 'BuPu'
    cmap_pf = 'magma'
    vector_color = 'white'
    vector_width = 1.4

    fig = plt.figure(figsize=figsize)

    f1 = utils.plot_map(
        prefix/f"1.3mm/0deg/scat/{source}_I.fits",
        cmap=cmap_i, 
        stretch='asinh' if source == 'radmc3d' else 'linear', 
        scalebar=scalebar, 
        bright_temp=False, 
        vmin=vmin_i, 
        vmax=vmax_i, 
        rescale=rescale_i, 
        cblabel=cblabel_i, 
        figure=fig,
        figsize=None,
        subplot=[x[0], y[0], dx, dy], 
    )
    f2 = utils.plot_map(
        prefix/f"1.3mm/0deg/scat/{source}_Q.fits",
        cmap=cmap_q, 
        stretch='linear', 
        scalebar=scalebar, 
        bright_temp=False, 
        vmin=vmin_q, 
        vmax=vmax_q, 
        rescale=rescale_q, 
        cblabel=cblabel_q, 
        figure=fig,
        figsize=None,
        subplot=[x[1], y[0], dx, dy], 
    )
    f3 = utils.plot_map(
        prefix/f"1.3mm/0deg/scat/{source}_U.fits",
        cmap=cmap_q, 
        stretch='linear', 
        scalebar=scalebar, 
        bright_temp=False, 
        vmin=vmin_u, 
        vmax=vmax_u, 
        rescale=rescale_u, 
        cblabel=cblabel_u, 
        figure=fig,
        figsize=None,
        subplot=[x[2], y[0], dx, dy], 
    )
    if source == 'radmc3d':
        f4 = utils.plot_map(
            prefix/f"1.3mm/0deg/scat/{source}_pf.fits",
            cmap=cmap_pf, 
            stretch='asinh', 
            scalebar=None, 
            bright_temp=False, 
            vmin=vmin_pf, 
            vmax=vmax_pf, 
            rescale=rescale_pf, 
            cblabel=cblabel_pf, 
            figure=fig,
            figsize=None,
            subplot=[x[3], y[0], dx, dy], 
        )
    f5 = utils.plot_map(
        prefix/f"7mm/0deg/scat/{source}_I.fits",
        cmap=cmap_i, 
        stretch='asinh' if source == 'radmc3d' else 'linear', 
        scalebar=scalebar, 
        bright_temp=False, 
        vmin=vmin_i, 
        vmax=vmax_i, 
        rescale=rescale_i, 
        cblabel=cblabel_i, 
        figure=fig,
        figsize=None,
        subplot=[x[0], y[1], dx, dy], 
    )
    f6 = utils.plot_map(
        prefix/f"7mm/0deg/scat/{source}_Q.fits",
        cmap=cmap_q, 
        stretch='linear', 
        scalebar=scalebar, 
        bright_temp=False, 
        vmin=vmin_q, 
        vmax=vmax_q, 
        rescale=rescale_q, 
        cblabel=cblabel_q, 
        figure=fig,
        figsize=None,
        subplot=[x[1], y[1], dx, dy], 
    )
    f7 = utils.plot_map(
        prefix/f"7mm/0deg/scat/{source}_U.fits",
        cmap=cmap_q, 
        stretch='linear', 
        scalebar=scalebar, 
        bright_temp=False, 
        vmin=vmin_u, 
        vmax=vmax_u, 
        rescale=rescale_u, 
        cblabel=cblabel_u, 
        figure=fig,
        figsize=None,
        subplot=[x[2], y[1], dx, dy], 
    )
    if source == 'radmc3d':
        f8 = utils.plot_map(
            prefix/f"7mm/0deg/scat/{source}_pf.fits",
            cmap=cmap_pf, 
            stretch='asinh', 
            scalebar=None, 
            bright_temp=False, 
            vmin=vmin_pf, 
            vmax=vmax_pf, 
            rescale=rescale_pf, 
            cblabel=cblabel_pf, 
            figure=fig,
            figsize=None,
            subplot=[x[3], y[1], dx, dy], 
        )

    # Label each panel
    bbox = {'fc':'white','ec':'white', 'alpha':0.8 if source=='radmc3d' else 0}

    f1.add_label(0.05, 0.88, 'Stokes I\n1.3mm', relative=True, layer='I', 
        color='white', size=21, ha='left')

    f2.add_label(0.05, 0.88, 'Stokes Q', relative=True, layer='Q', size=21, 
        color='black', ha='left', bbox=bbox)

    f3.add_label(0.05, 0.88, 'Stokes U', relative=True, layer='U', size=21, 
        color='black', ha='left', bbox=bbox)

    f5.add_label(0.05, 0.88, 'Stokes I\n7mm', relative=True, layer='I', 
        color='white', size=21, ha='left')

    f6.add_label(0.05, 0.88, 'Stokes Q', relative=True, layer='Q', size=21, 
        color='black', ha='left', bbox=bbox)

    f7.add_label(0.05, 0.88, 'Stokes U', relative=True, layer='U', size=21, 
        color='black', ha='left', bbox=bbox)

    f1.add_label(0.88, 0.92, f"{'Model' if source=='radmc3d' else 'ALMA'}", size=21,
        relative=True, layer='band6', color='white', ha='right')

    f5.add_label(0.88, 0.92, f"{'Model' if source=='radmc3d' else 'VLA'}", size=21, 
        relative=True, layer='bandq', color='white', ha='right')


    if source == "radmc3d":
        f4.set_nan_color('black')
        f8.set_nan_color('black')
        f2.scalebar.set_color('none')
        f3.scalebar.set_color('none')
        f6.scalebar.set_color('#67001f')
        f7.scalebar.set_color('#67001f')
        f1.colorbar.set_ticks([0, 10, 50, 100])
        f2.colorbar.set_ticks([-1, -0.5, 0, 0.5, 1])
        f3.colorbar.set_ticks([-1, -0.5, 0, 0.5, 1])
        f4.colorbar.set_ticks([0, 0.01, 0.05, 0.1])
        f5.colorbar.set_ticks([0, 1, 2, 3, 4, 5, 6])
        f6.colorbar.set_ticks([-1, -0.5, 0, 0.5, 1])
        f7.colorbar.set_ticks([-1, -0.5, 0, 0.5, 1])
        f8.colorbar.set_ticks([0, 0.01, 0.05, 0.1])
    else:
        f2.scalebar.set_color('black')
        f3.scalebar.set_color('black')
        f6.scalebar.set_color('black')
        f7.scalebar.set_color('black')
    
    # Add polarization vector to the Pol. fraction maps
    if source == 'radmc3d':
        # Create a dummy file filled with Pf=1 to even out the vector lengths
        pf, pf_h = fits.getdata(
            str(prefix/f"1.3mm/0deg/scat/{source}_pf.fits"), header=True)

        utils.write_fits('pfrac_1.fits', np.ones(pf.shape), pf_h, overwrite=True)

        f4.show_vectors(
            "pfrac_1.fits", 
            str(prefix/f"1.3mm/0deg/scat/{source}_pa.fits"),
            step=16,
            scale=10, 
            rotate = 0 if source == 'obs' else 90, 
            color=vector_color,
            linewidth=vector_width, 
            units='degrees', 
        )
        f8.show_vectors(
            "pfrac_1.fits", 
            str(prefix/f"7mm/0deg/scat/{source}_pa.fits"),
            step=12,
            scale=8, 
            rotate = 0 if source == 'obs' else 90, 
            color=vector_color,
            linewidth=vector_width, 
            units='degrees', 
        )
    
        os.remove("pfrac_1.fits")

    # Hide labels and ticks for all panels
    for f in [f1,f2,f3,f4,f5,f6,f7,f8] if source=='radmc3d' else [f1,f2,f3,f5,f6,f7]:
        f.tick_labels.hide()
        f.axis_labels.hide()

    # Add each FITS-sub-figure to the main figure 
    fig.f1 = f1
    fig.f2 = f2
    fig.f3 = f3
    fig.f5 = f5
    fig.f6 = f6
    fig.f7 = f7
    if source == 'radmc3d':
        fig.f4 = f4
        fig.f8 = f8

    return utils.plot_checkout(fig, show, savefig=savefig, path=plot_dir)


def plot_grain_growth_soot_line(temp=300, show=True, savefig=None, figsize=(5, 4)):
    """Appendix figure (3 panels) for the case of grain growth within sootline:
        - 1.3 mm continuum map (APLPy)
        - 3 mm continuum map (APLPy)
        - Horizontal cuts for obs and model at both wavelengths (matplotlib)
    """

    path = home/'phd/radmc3d/rhd_disk/results/dust_emission/tgas/sgo/'/\
        f'soot{temp}K/dgrowth/50org/amax100um' 

    # Generate the horizontal cuts of brightness temp.
    band6_obs = utils.horizontal_cut(
        lam='1.3mm', 
        add_obs=True, 
        return_data=True, 
        show=False, 
        verbose=False,
    )
    band3_obs = utils.horizontal_cut(
        lam='3mm', 
        add_obs=True, 
        return_data=True, 
        show=False, 
        verbose=False,
    )
    band6_cut = utils.horizontal_cut(
        filename=path/'1.3mm/0deg/scat/synobs_I.fits', 
        align=False, 
        add_obs=False, 
        show=False, 
        cut_along="center", 
        return_data=True, 
    )
    band3_cut = utils.horizontal_cut(
        filename=path/'3mm/0deg/scat/synobs_I.fits', 
        align=False, 
        add_obs=False, 
        show=False, 
        cut_along="center", 
        return_data=True, 
    )

    # Close the figures generated by horizontal_cut()
    plt.close('all') 

    # First panel
    f1 = utils.plot_map(path/'1.3mm/0deg/scat/synobs_I.fits', bright_temp=True)
    f1.add_label(0.05, 0.91, r'{\bf 1.3mm}', relative=True, layer='1mm', 
        color='tab:red', size=22, ha='left')
    f1.add_label(0.95, 0.91, f'Sootline at \n{temp} K', relative=True, 
        layer='sootline', color='white', size=20, ha='right')
    f1.axis_labels.set_xtext('')
    f1.tick_labels.hide_x()
    f1.tick_labels.hide_y()
    f1.axis_labels.hide_x()
    f1.axis_labels.hide_y()
    f1.colorbar.set_location('bottom')

    # Second panel
    f2 = utils.plot_map(path/'3mm/0deg/scat/synobs_I.fits', bright_temp=True)
    f2.add_label(0.05, 0.91, r'{\bf 3mm}', relative=True, layer='3mm', 
        color='tab:green', size=22, ha='left')
    f2.add_label(0.95, 0.91, f'Sootline at \n{temp} K', relative=True, 
        layer='sootline', color='white', size=22, ha='right')
    f2.axis_labels.set_xtext('')
    f2.tick_labels.hide_x()
    f2.tick_labels.hide_y()
    f2.axis_labels.hide_x()
    f2.axis_labels.hide_y()
    f2.colorbar.set_location('bottom')
    
    # Third panel
    fig = plt.figure(figsize=figsize)
    plt.plot(*band6_obs, color='tab:red', ls='-')
    plt.plot(*band6_cut, color='tab:red', ls='--')
    plt.plot(*band3_obs, color='tab:green', ls='-')
    plt.plot(*band3_cut, color='tab:green', ls='--') 

    # Add two ghost lines to customize the legend
    plt.plot([],[], color='black', ls='-', label='ALMA Observations')
    plt.plot([],[], color='black', ls='--', 
        label=r'\noindent Model with \\$a_{\rm max}=1000\mu$m \\' +
        r'within the soot \\line and 100$\mu$m \\outside')

    plt.annotate('1.3 mm', xy=(0.95, 0.88), xycoords="axes fraction", 
        size=20, color='tab:red', ha='right')
    plt.annotate('3 mm', xy=(0.95, 0.80), xycoords="axes fraction", 
        size=20, color='tab:green', ha='right')
    plt.legend(loc='upper left', fontsize=13)

    plt.ylabel(r'$T_{\rm B}$ (K)', size=15)
    plt.xlabel("Peak angular offset (arcseconds)", size=15)
    plt.xlim(-0.33, 0.33)
    plt.ylim(-10, 600)

    plt.tight_layout()

    # Save panels in separate figures
#    f1.savefig(plot_dir/f'grain-growth-soot-line-{temp}_1.pdf')
#    f2.savefig(plot_dir/f'grain-growth-soot-line-{temp}_2.pdf')
#    plt.savefig(plot_dir/f'grain-growth-soot-line-{temp}_3.pdf')

    return utils.plot_checkout(fig, show, savefig=savefig, path=plot_dir)
