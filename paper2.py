"""
	- Figure 1: Observations at 3mm, 1.3mm, 7mm & 18mm.
	- Figure 2: Dust opacities for different comp and size.
	- Figure 3: Horizontal cuts for different amax and lambda.
	- Figure 4: Observed and modelled spectral indices.
	- Figure 5: Fluxes for the best match of Figure 4. 
    Figsize two-column: 18cm x 5.5cm = 3*2.36in x 2.17in
"""
import os
import warnings
from astropy.io import ascii, fits
from astropy.coordinates import SkyCoord
import astropy.units as u
import astropy.constants as c
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path

import utils

home = Path.home()

# Ignore all warnings, usually generated by APLPy
warnings.filterwarnings('ignore')

# Global plot settings
scalebar = 20*u.au
cmap = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3','#a6d854','#ffd92f']
cmap = ['#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00']
cmap = cmap[::-1]


@utils.elapsed_time
def plot_observations(show=True, savefig=None, figsize=(19,6)):
    """ Figure 1 """

    fig = plt.figure(figsize=figsize)

    f1 = utils.plot_map(
        home/f'phd/observations/iras16293/band6/sourceB_1.3mm.fits',
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        vmin=0, 
        vmax=287, 
        contours=False, 
        figure=fig,
        subplot=[0.08, 0.05, 0.2, 0.9], 
    )
    f2 = utils.plot_map(
        home/f'phd/observations/iras16293/band3/sourceB_3mm.fits',
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        vmin=0, 
        vmax=468, 
        contours=False, 
        figure=fig,
        subplot=[0.31, 0.05, 0.2, 0.9], 
    )
    f3 = utils.plot_map(
        home/f'phd/observations/iras16293/bandQ/stokes_I_zoom.fits', 
        figsize=None, 
        stretch='linear',
        scalebar=scalebar,
        vmin=0, 
        vmax=150, 
        bright_temp=True, 
        figure=fig,
        subplot=[0.55, 0.05, 0.2, 0.9], 
    )
    f4 = utils.plot_map(
        home/f'phd/observations/iras16293/bandKu/stokes_I_zoom_rob0.fits', 
        figsize=None, 
        stretch='linear',
        scalebar=scalebar,
        vmin=0, 
        vmax=300, 
        bright_temp=True, 
        figure=fig,
        subplot=[0.78, 0.05, 0.2, 0.9], 
    )

    for f in [f1, f2, f3, f4]:
        f.scalebar.set_color('white')
        f.ticks.set_color('white')
        f.ticks.set_length(7)
        f.ticks.set_linewidth(2)
        f.add_beam(edgecolor='white', facecolor='none', linewidth=1)
        f.axis_labels.set_xtext('Right Ascension (J2000)')
        f1.axis_labels.set_ytext('Declination (J2000)')
        f.axis_labels.show()

    f1.add_label(0.95, 0.88, r'ALMA Band 6', relative=True, layer='band', 
        color='white', size=21, ha='right')
    f2.add_label(0.95, 0.88, r'ALMA Band 3', relative=True, layer='band', 
        color='white', size=21, ha='right')
    f3.add_label(0.95, 0.88, r'VLA Band Q', relative=True, layer='band', 
        color='white', size=21, ha='right')
    f4.add_label(0.95, 0.88, r'VLA Band Ku', relative=True, layer='band', 
        color='white', size=21, ha='right')
    f1.add_label(0.95, 0.80, r'1.3mm', relative=True, layer='lam', 
        color='white', size=23, ha='right')
    f2.add_label(0.95, 0.80, r'3mm', relative=True, layer='lam', 
        color='white', size=23, ha='right')
    f3.add_label(0.95, 0.80, r'6.9mm', relative=True, layer='lam', 
        color='white', size=23, ha='right')
    f4.add_label(0.95, 0.80, r'18mm', relative=True, layer='lam', 
        color='white', size=23, ha='right')

    # Recenter the figures
    model_angular_size = 150*u.au.to(u.pc) / 141
    img_radius = (model_angular_size/2)*u.rad.to(u.deg)

    # Recenter ALMA images
    coord = SkyCoord(ra='16h32m22.63s', dec='-24d28m31.8s')
    f1.recenter(coord.ra.value, coord.dec.value, radius=img_radius)
    f2.recenter(coord.ra.value, coord.dec.value, radius=img_radius)

    # Recenter VLA image
    coord = SkyCoord(ra='16h32m22.615s', dec='-24d28m32.5s')
    f3.recenter(coord.ra.value, coord.dec.value, radius=img_radius)
    coord = SkyCoord(ra='16h32m22.615s', dec='-24d28m32.7s')
    f4.recenter(coord.ra.value, coord.dec.value, radius=img_radius)
    
    for f in [f2,f3,f4]:
        f.tick_labels.hide_y()
        f.axis_labels.hide_y()


    return utils.plot_checkout(fig, show, savefig=savefig, path=home/'phd/plots/paper2')



@utils.elapsed_time
def plot_opacities(show=True, savefig='', figsize=(16, 5)):
    """ Figure 2
        Dust opacities. One panel for each components and for the mixture. 
        Includes scattering, absorption and extinction opacities
        for amax 10, 100 and 1000um.     
     """

    # Avoid pylab to open a new figure for every call to horizontal_cut()
    plt.rcParams['interactive'] = False

    # Set the common origin path for all data results
    prefix=home/'phd/rhd_disk/evaporation_test/results/dust_heating/temp_eos/'

    # Read the opacities for different amax
    a10um_sil = utils.plot_opacity_file(
        filename=prefix/'sg/nosubl/amax10um/data/dust_mixture_001_comp_003.dat', 
        col='all', 
        return_data=True,
        show=False, 
        verbose=False,
    )
    a100um_sil = utils.plot_opacity_file(
        filename=prefix/'sg/nosubl/amax100um/data/dust_mixture_001_comp_003.dat', 
        col='all', 
        return_data=True,
        show=False, 
        verbose=False,
    )
    a1000um_sil = utils.plot_opacity_file(
        filename=prefix/'sg/nosubl/amax1000um/data/dust_mixture_001_comp_003.dat', 
        col='all', 
        return_data=True,
        show=False, 
        verbose=False,
    )
    a10um_sg = utils.plot_opacity_file(
        filename=prefix/'sg/nosubl/amax10um/data/dust_mixture_001.dat', 
        col='all', 
        return_data=True,
        show=False, 
        verbose=False,
    )
    a100um_sg = utils.plot_opacity_file(
        filename=prefix/'sg/nosubl/amax100um/data/dust_mixture_001.dat', 
        col='all', 
        return_data=True,
        show=False, 
        verbose=False,
    )
    a1000um_sg = utils.plot_opacity_file(
        filename=prefix/'sg/nosubl/amax1000um/data/dust_mixture_001.dat', 
        col='all', 
        return_data=True,
        show=False, 
        verbose=False,
    )
    a10um_sgo = utils.plot_opacity_file(
        filename=prefix/'sgo/subl300K/amax10um/data/dust_mixture_001.dat', 
        col='all', 
        return_data=True,
        show=False, 
        verbose=False,
    )
    a100um_sgo = utils.plot_opacity_file(
        filename=prefix/'sgo/subl300K/amax100um/data/dust_mixture_001.dat', 
        col='all', 
        return_data=True,
        show=False, 
        verbose=False,
    )
    a1000um_sgo = utils.plot_opacity_file(
        filename=prefix/'sgo/subl300K/amax1000um/data/dust_mixture_001.dat', 
        col='all', 
        return_data=True,
        show=False, 
        verbose=False,
    )

    # Close all previously generated figures
    plt.close('all')
    
    # Generate a new figure
    fig, p = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=figsize)

    cmap = ['#66c2a5','#fc8d62','#8da0cb']
    
    # Plot ghost lines for each amax to be added to the legend
    ls = [':', '--', '-']
    p[0].loglog([], [], ls=ls[0], color='black', label=r'$\kappa^{\rm abs}$')
    p[0].loglog([], [], ls='--', color='black', label=r'$\kappa^{\rm sca}$')
    p[0].loglog([], [], ls='-', color='black', label=r'$\kappa^{\rm ext}$')
    p[1].loglog([], [], ls=ls[0], color='black', label=r'$\kappa^{\rm abs}$')
    p[1].loglog([], [], ls='--', color='black', label=r'$\kappa^{\rm sca}$')
    p[1].loglog([], [], ls='-', color='black', label=r'$\kappa^{\rm ext}$')
    p[2].loglog([], [], ls=ls[0], color='black', label=r'$\kappa^{\rm abs}$')
    p[2].loglog([], [], ls='--', color='black', label=r'$\kappa^{\rm sca}$')
    p[2].loglog([], [], ls='-', color='black', label=r'$\kappa^{\rm ext}$')
    
    # First panel: silicates
    p[0].loglog(a10um_sil['lam'], a10um_sil['abs'], color=cmap[0], ls=ls[0])
    p[0].loglog(a10um_sil['lam'], a10um_sil['sca'], color=cmap[0], ls=ls[1])
    p[0].loglog(a10um_sil['lam'], a10um_sil['ext'], color=cmap[0], label=r'Silicate')
    p[0].loglog(a10um_sg['lam'], a10um_sg['abs'], color=cmap[1], ls=ls[0])
    p[0].loglog(a10um_sg['lam'], a10um_sg['sca'], color=cmap[1], ls=ls[1])
    p[0].loglog(a10um_sg['lam'], a10um_sg['ext'], color=cmap[1], label=r'Sil + gra')
    p[0].loglog(a10um_sgo['lam'], a10um_sgo['abs'], color=cmap[2], ls=ls[0])
    p[0].loglog(a10um_sgo['lam'], a10um_sgo['sca'], color=cmap[2], ls=ls[1])
    p[0].loglog(a10um_sgo['lam'], a10um_sgo['ext'], color=cmap[2], label=r'sil + gra + org')
    
    # Second panel: silicates and graphites
    p[1].loglog(a100um_sil['lam'], a100um_sil['abs'], color=cmap[0], ls=ls[0])
    p[1].loglog(a100um_sil['lam'], a100um_sil['sca'], color=cmap[0], ls=ls[1])
    p[1].loglog(a100um_sil['lam'], a100um_sil['ext'], color=cmap[0], label=r'Silicate')
    p[1].loglog(a100um_sg['lam'], a100um_sg['abs'], color=cmap[1], ls=ls[0])
    p[1].loglog(a100um_sg['lam'], a100um_sg['sca'], color=cmap[1], ls=ls[1])
    p[1].loglog(a100um_sg['lam'], a100um_sg['ext'], color=cmap[1], label=r'Sil + gra')
    p[1].loglog(a100um_sgo['lam'], a100um_sgo['abs'], color=cmap[2], ls=ls[0])
    p[1].loglog(a100um_sgo['lam'], a100um_sgo['sca'], color=cmap[2], ls=ls[1])
    p[1].loglog(a100um_sgo['lam'], a100um_sgo['ext'], color=cmap[2], label=r'sil + gra + org')

    # Third panel: silicates, graphites and refractory organics
    p[2].loglog(a1000um_sil['lam'], a1000um_sil['abs'], color=cmap[0], ls=ls[0])
    p[2].loglog(a1000um_sil['lam'], a1000um_sil['sca'], color=cmap[0], ls=ls[1])
    p[2].loglog(a1000um_sil['lam'], a1000um_sil['ext'], color=cmap[0], label=r'Silicate')
    p[2].loglog(a1000um_sg['lam'], a1000um_sg['abs'], color=cmap[1], ls=ls[0])
    p[2].loglog(a1000um_sg['lam'], a1000um_sg['sca'], color=cmap[1], ls=ls[1])
    p[2].loglog(a1000um_sg['lam'], a1000um_sg['ext'], color=cmap[1], label=r'Sil + gra')
    p[2].loglog(a1000um_sgo['lam'], a1000um_sgo['abs'], color=cmap[2], ls=ls[0])
    p[2].loglog(a1000um_sgo['lam'], a1000um_sgo['sca'], color=cmap[2], ls=ls[1])
    p[2].loglog(a1000um_sgo['lam'], a1000um_sgo['ext'], color=cmap[2], label=r'Sil + gra + org')

    p[0].legend(ncol=2, loc='lower left', fontsize=13)
    p[1].legend(ncol=2, loc='lower left', fontsize=13)
    p[2].legend(ncol=2, loc='lower left', fontsize=13)

    # Illustrate the observing bands
    p[0].axvline(1.3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[0].axvline(3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[0].axvline(7e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[0].axvline(18e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[1].axvline(1.3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[1].axvline(3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[1].axvline(7e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[1].axvline(18e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[2].axvline(3e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[2].axvline(7e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[2].axvline(18e3, ls='-', color='grey', lw=0.5, alpha=0.6)
    p[0].text(1.3e3, 5e2, 'Band 6', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[0].text(3e3, 5e2, 'Band 3', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[0].text(7e3, 5e2, 'Band Q', rotation=90, size=13, color='grey', \
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[0].text(18e3, 5e2, 'Band Ku', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[1].text(1.3e3, 5e2, 'Band 6', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[1].text(3e3, 5e2, 'Band 3', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[1].text(7e3, 5e2, 'Band Q', rotation=90, size=13, color='grey', \
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[1].text(18e3, 5e2, 'Band Ku', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[2].text(1.3e3, 5e2, 'Band 6', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[2].text(3e3, 5e2, 'Band 3', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[2].text(7e3, 5e2, 'Band Q', rotation=90, size=13, color='grey', \
        ha='center', bbox={'fc':'white','ec':'white'}) 
    p[2].text(18e3, 5e2, 'Band Ku', rotation=90, size=13, color='grey', 
        ha='center', bbox={'fc':'white','ec':'white'}) 

    # Label each panel with the composition
    p[0].text(2e-1, 1e1, r'$a_{\rm max}=10\mu$m', color='black', size=20, va='top')
    p[1].text(2e-1, 1e1, r'$a_{\rm max}=100\mu$m', color='black', size=20, va='top')
    p[2].text(2e-1, 1e1, r'$a_{\rm max}=1000\mu$m', color='black', size=20, va='top')

    p[0].set_xlabel('Wavelength (microns)', size=15)
    p[1].set_xlabel('Wavelength (microns)', size=15)
    p[2].set_xlabel('Wavelength (microns)', size=15)
    p[0].set_ylabel(r'Dust opacity $\kappa$ (cm$^2$\,g$^{-1}$)', size=15)

    p[0].set_xlim(1e-1, 3e4)
    p[1].set_xlim(1e-1, 3e4)
    p[2].set_xlim(1e-1, 3e4)
    p[0].set_ylim(1e-2, 1e4)
    p[1].set_ylim(1e-2, 1e4)
    p[2].set_ylim(1e-2, 1e4)

    plt.subplots_adjust(wspace=0)

    return utils.plot_checkout(fig, show, savefig, path=home/f'phd/plots/paper2')



@utils.elapsed_time
def plot_horizontal_cuts(show=True, savefig='', figsize=(12, 10)):
    """ Figure 3 
        Plot horizontal cuts for all four bands for amax 10, 100 & 1000um.    
    """
    
    # Avoid pylab to open a new figure for every call to horizontal_cut()
    plt.rcParams['interactive'] = False

    # Set the common origin path for all data results
    prefix=home/'phd/rhd_disk/results/dust_emission/temp_eos/sg/'

    # Call the real obs. data
    band6_obs = utils.horizontal_cut(
        lam='1.3mm', 
        cut_along='max',
        axis=0, 
        filename=None, 
        add_obs=True, 
        return_data=True, 
        show=False, 
    )
    band3_obs = utils.horizontal_cut(
        lam='3mm', 
        cut_along='max',
        axis=0, 
        filename=None, 
        add_obs=True, 
        return_data=True, 
        show=False, 
    )
    bandQ_obs = utils.horizontal_cut(
        lam='7mm', 
        cut_along='max',
        axis=0, 
        filename=None, 
        add_obs=True, 
        return_data=True, 
        show=False, 
    )
    bandKu_obs = utils.horizontal_cut(
        lam='18mm', 
        cut_along='max',
        axis=0, 
        filename=None, 
        add_obs=True, 
        return_data=True, 
        show=False, 
    )

    # Call the simulated data.
    # amax 10um. All four bands. 
    band6_a10um = utils.horizontal_cut(
        filename=prefix/'amax10um/1.3mm/0deg/dust_scat/data/alma_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    band3_a10um = utils.horizontal_cut(
        filename=prefix/'amax10um/3mm/0deg/dust_scat/data/alma_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    bandQ_a10um = utils.horizontal_cut(
        filename=prefix/'amax10um/7mm/0deg/dust_scat/data/vla_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    bandKu_a10um = utils.horizontal_cut(
        filename=prefix/'amax10um/18mm/0deg/dust_scat/data/vla_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    # amax 100um. All four bands. 
    band6_a100um = utils.horizontal_cut(
        filename=prefix/'amax100um/1.3mm/0deg/dust_scat/data/alma_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    band3_a100um = utils.horizontal_cut(
        filename=prefix/'amax100um/3mm/0deg/dust_scat/data/alma_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    bandQ_a100um = utils.horizontal_cut(
        filename=prefix/'amax100um/7mm/0deg/dust_scat/data/vla_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    bandKu_a100um = utils.horizontal_cut(
        filename=prefix/'amax100um/18mm/0deg/dust_scat/data/vla_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    # amax 1000um. All four bands. 
    band6_a1000um = utils.horizontal_cut(
        filename=prefix/'amax1000um/1.3mm/0deg/dust_scat/data/alma_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    band3_a1000um = utils.horizontal_cut(
        filename=prefix/'amax1000um/3mm/0deg/dust_scat/data/alma_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    bandQ_a1000um = utils.horizontal_cut(
        filename=prefix/'amax1000um/7mm/0deg/dust_scat/data/vla_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    bandKu_a1000um = utils.horizontal_cut(
        filename=prefix/'amax1000um/18mm/0deg/dust_scat/data/vla_I.fits', 
        add_obs=False, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )

    # Close all figures generated by the calls to horizontal_cut()
    plt.close('all')

    # Generate the figure
    fig, p = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=figsize)

    # 1.3mm
    p[0,0].plot(*band6_obs, ls='-.', color='black', label='IRAS16293B')
    p[0,0].plot(*band6_a10um, ls='-', color=cmap[0], label=r'$a_{\rm max}$=10$\mu$m')
    p[0,0].plot(*band6_a100um, ls='-', color=cmap[1], label=r'$a_{\rm max}$=100$\mu$m')
    p[0,0].plot(*band6_a1000um, ls='-', color=cmap[2], label=r'$a_{\rm max}$=1000$\mu$m')
    p[0,0].annotate('1.3mm', xy=(0.80, 0.85), xycoords="axes fraction", fontsize=20)
    p[0,0].legend(ncol=1, loc='upper left', fontsize=15)

    # 3mm
    p[0,1].plot(*band3_obs, ls='-.', color='black', label='IRAS16293B')
    p[0,1].plot(*band3_a10um, ls='-', color=cmap[0], label=r'$a_{\rm max}$=10$\mu$m')
    p[0,1].plot(*band3_a100um, ls='-', color=cmap[1], label=r'$a_{\rm max}$=100$\mu$m')
    p[0,1].plot(*band3_a1000um, ls='-', color=cmap[2], label=r'$a_{\rm max}$=1000$\mu$m')
    p[0,1].annotate('3mm', xy=(0.80, 0.85), xycoords="axes fraction", fontsize=20)
    p[0,1].legend(ncol=1, loc='upper left', fontsize=15)

    # 7mm
    p[1,0].plot(*bandQ_obs, ls='-.', color='black', label='IRAS16293B')
    p[1,0].plot(*bandQ_a10um, ls='-', color=cmap[0], label=r'$a_{\rm max}$=10$\mu$m')
    p[1,0].plot(*bandQ_a100um, ls='-', color=cmap[1], label=r'$a_{\rm max}$=100$\mu$m')
    p[1,0].plot(*bandQ_a1000um, ls='-', color=cmap[2], label=r'$a_{\rm max}$=1000$\mu$m')
    p[1,0].annotate('7mm', xy=(0.80, 0.85), xycoords="axes fraction", fontsize=20)
    p[1,0].legend(ncol=1, loc='upper left', fontsize=15)

    # 18mm 
    p[1,1].plot(*bandKu_obs, ls='-.', color='black', label='IRAS16293B')
    p[1,1].plot(*bandKu_a10um, ls='-', color=cmap[0], label=r'$a_{\rm max}$=10$\mu$m')
    p[1,1].plot(*bandKu_a100um, ls='-', color=cmap[1], label=r'$a_{\rm max}$=100$\mu$m')
    p[1,1].plot(*bandKu_a1000um, ls='-', color=cmap[2], label=r'$a_{\rm max}$=1000$\mu$m')
    p[1,1].annotate('18mm', xy=(0.80, 0.85), xycoords="axes fraction", fontsize=20)
    p[1,1].legend(ncol=1, loc='upper left', fontsize=15)

    p[1,1].set_xlim(-0.33, 0.33)
    p[0,1].yaxis.tick_right()
    p[1,1].yaxis.tick_right()
    p[0,1].yaxis.set_label_position("right")
    p[1,1].yaxis.set_label_position("right")
    p[0,0].set_ylabel(r'$T_{\rm B}$ (K)')
    p[0,1].set_ylabel(r'$T_{\rm B}$ (K)')
    p[1,0].set_ylabel(r'$T_{\rm B}$ (K)')
    p[1,1].set_ylabel(r'$T_{\rm B}$ (K)')
    p[1,0].set_xlabel("Angular offset (arcseconds)")
    p[1,1].set_xlabel("Angular offset (arcseconds)")

    plt.subplots_adjust(hspace=0, wspace=0)

    return utils.plot_checkout(fig, show, savefig, path=home/f'phd/plots/paper2')


@utils.elapsed_time
def plot_spectral_indexes(show=True, savefig='', figsize=(14, 9)):
    """ Figure 4
    """

    # Avoid pylab to open a new figure for every call to horizontal_cut()
    plt.rcParams['interactive'] = False

    # Initialize the figure 
    fig = plt.figure(figsize=figsize)

    # Set the path prefixes
    prefix2 = home/'phd/rhd_disk/results/dust_emission/temp_eos/sg/amax100um/'
    prefix3 = home/'phd/rhd_disk/evaporation_test/results/dust_emission' / \
                    'temp_eos/sg/subl300K/amax100um/'
    prefix4 = home/'phd/rhd_disk/evaporation_test/results/dust_emission' / \
                    'temp_eos/sg/nosubl/amax100um/'
    prefix5 = home/'phd/rhd_disk/evaporation_test/results/dust_emission' / \
                    'temp_eos/sg/subl300K/amax100um/'

    f1 = utils.plot_map(
        home/f'phd/observations/iras16293/sourceB_spectral_index_band3-6.fits',
        cmap='PuOr', 
        cblabel='Observed spectral index', 
        figsize=None, 
        stretch='linear',
        scalebar=scalebar,
        bright_temp=False, 
        figure=fig,
        subplot=[0.10, 0.25, 0.28, 0.43], 
        verbose=False,
    )
    f2 = utils.spectral_index(
        prefix2/f'1.3mm/0deg/dust_scat/data/alma_I.fits', 
        prefix2/f'3mm/0deg/dust_scat/data/alma_I_smoothed1.3mm.fits', 
        vmin=1.7, 
        vmax=3.5, 
        mask=0.006,
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        figure=fig,
        subplot=[0.40, 0.55, 0.28, 0.43], 
        savefile=prefix2/'spectral_index.fits', 
        return_fig=True, 
        show=False,
    )
    f3 = utils.spectral_index(
        prefix3/f'1.3mm/0deg/dust_scat/data/alma_I.fits', 
        prefix3/f'3mm/0deg/dust_scat/data/alma_I_smoothed1.3mm.fits', 
        vmin=1.7, 
        vmax=3.5, 
        mask=0.006,
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        figure=fig,
        subplot=[0.70, 0.55, 0.28, 0.43], 
        savefile=prefix3/'spectral_index.fits', 
        return_fig=True, 
        show=False,
    )
    f4 = utils.spectral_index(
        prefix4/f'1.3mm/180deg/dust_scat/data/alma_I.fits', 
        prefix4/f'3mm/180deg/dust_scat/data/alma_I_smoothed1.3mm.fits', 
        vmin=1.7, 
        vmax=3.5, 
        mask=0.006,
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        figure=fig,
        subplot=[0.40, 0.05, 0.28, 0.43], 
        savefile=prefix4/'spectral_index_flipped.fits', 
        return_fig=True, 
        show=False,
    )
    f5 = utils.spectral_index(
        prefix5/f'1.3mm/180deg/dust_scat/data/alma_I.fits', 
        prefix5/f'3mm/180deg/dust_scat/data/alma_I_smoothed1.3mm.fits', 
        vmin=1.7, 
        vmax=3.5, 
        mask=0.006,
        figsize=None,
        stretch='linear', 
        scalebar=scalebar, 
        figure=fig,
        subplot=[0.70, 0.05, 0.28, 0.43], 
        savefile=prefix5/'spectral_index_flipped.fits', 
        return_fig=True, 
        show=False,
    )

    # Zoom in the observed spectral index map
    model_angular_size = 100*u.au.to(u.pc) / 141
    img_radius = (model_angular_size/2)*u.rad.to(u.deg)
    coord = SkyCoord(ra='16h32m22.63s', dec='-24d28m31.8s')
    f1.recenter(coord.ra.value, coord.dec.value, radius=img_radius)
    f1.show_contour(colors="black", levels=[2])

    # Customize the axes ticks and labels
    for f in [f1,f2,f3,f4,f5]: 
        f.scalebar.set_color('black')
        f.add_beam(facecolor='none', edgecolor='black', linewidth=1)
        f.ticks.set_length(7)
        f.ticks.set_linewidth(2)
        if f is f1:
            f.axis_labels.set_xtext('Right Ascension (J2000)')
            f.axis_labels.set_ytext('Declination (J2000)')
            f.axis_labels.show()
        else:
            f.tick_labels.hide()
            f.axis_labels.hide()
            f.colorbar.hide()
    
    # Add titles to each figure
    f3.set_title(r'Carbon sublimation above 300K', size=18)
    f5.set_title(r'Carbon sublimation above 300K', size=18)
        
    # Annotate each figure
    f1.add_label(0.03, 0.92, r'ALMA', relative=True, size=22, \
        layer='alma', color='black', weight='bold', ha='left')
    f1.add_label(0.97, 0.94, r'$\alpha_{\rm 1.3-3\,mm}$', relative=True, \
        layer='amax', color='black', size=25, weight='bold', ha='right')

    f2.add_label(0.035, 0.93, r'$a_{\rm max}=100\mu$m', relative=True, size=18, \
        layer='amax', color='black', weight='bold', ha='left')

    f3.add_label(0.035, 0.93, r'$a_{\rm max}=100\mu$m',relative=True, size=18, \
        layer='amax', color='black', weight='bold', ha='left')

    f4.add_label(0.035, 0.93, r'$a_{\rm max}=100\mu$m', relative=True, size=18, \
        layer='amax', color='black', weight='bold', ha='left')
    f4.add_label(0.93, 0.93, r'Disk flipped', relative=True, size=18, \
        layer='disk', color='black', weight='bold', ha='right')

    f5.add_label(0.035, 0.93, r'$a_{\rm max}=100\mu$m', relative=True, size=18, \
        layer='amax', color='black', weight='bold', ha='left')
    f5.add_label(0.93, 0.93, r'Disk flipped', relative=True, size=18, \
        layer='disk', color='black', weight='bold', ha='right')

    return utils.plot_checkout(fig, show, savefig=savefig, path=home/'phd/plots/paper2')


def plot_cut_spectral_index(show=True, savefig='', figsize=(8,6)):
    """ Appendix figure.
    """
    
    # Avoid pylab to open a new figure for every call to horizontal_cut()
    plt.rcParams['interactive'] = False

    # Set the path prefixes
    prefix1 = home/'phd/observations/iras16293/'
    prefix2 = home/'phd/rhd_disk/results/dust_emission/temp_eos/sg/amax100um/'
    prefix3 = home/'phd/rhd_disk/evaporation_test/results/dust_emission' / \
                    'bin_gridx4/temp_eos/sg/subl300K/amax100um/'
    prefix4 = home/'phd/rhd_disk/evaporation_test/results/dust_emission' / \
                    'temp_eos/sg/nosubl/amax100um/'
    prefix5 = home/'phd/rhd_disk/evaporation_test/results/dust_emission' / \
                    'temp_eos/sg/subl300K/amax100um/'

    # Perform horizontal cuts to every spectral index map
    obs = utils.horizontal_cut( 
        filename=prefix1/'sourceB_spectral_index_band3-6.fits', 
        lam='alpha', 
        cut_along='center',
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )
    a100um = utils.horizontal_cut( 
        filename=prefix2/'spectral_index.fits', 
        lam='alpha', 
        cut_along='center',
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )
    a100um_subl = utils.horizontal_cut( 
        filename=prefix3/'spectral_index.fits', 
        lam='alpha', 
        cut_along='max',
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )
    a100um_flip = utils.horizontal_cut( 
        filename=prefix4/'spectral_index_flipped.fits', 
        lam='alpha', 
        cut_along='center',
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )
    a100um_subl_flip = utils.horizontal_cut( 
        filename=prefix5/'spectral_index_flipped.fits', 
        lam='alpha', 
        cut_along='center',
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )

    # Close all previously generated figures
    plt.close('all')
    
    # Initialize the figure 
    fig = plt.figure(figsize=figsize)

    plt.annotate('Horizontal cuts\nof\nspectral indexes', xy=(0.03, 0.80), 
        xycoords='axes fraction', size=15)
    plt.plot(*obs, color='black', label='IRAS16293B', ls='-.', lw=2)
    plt.plot(*a100um, color=cmap[0], 
        label=r'$a_{\rm max}$=100$\mu$m')
    plt.plot(*a100um_flip, color=cmap[1], 
        label=r'\noindent$a_{\rm max}$=100$\mu$m\\flipped')
    plt.plot(*a100um_subl, color=cmap[2], 
        label=r'\noindent$a_{\rm max}$=100$\mu$m\\sublimation')
    plt.plot(*a100um_subl_flip, color=cmap[3], 
        label=r'\noindent$a_{\rm max}$=100$\mu$m\\sublimation\\flipped')

    plt.legend(ncol=1)
    plt.xlim(-0.30, 0.30)
    plt.ylim(1.5, 3.5)
    plt.xlabel('Angular offset (arcseconds)')
    plt.ylabel('Spectral index')

    return utils.plot_checkout(fig, show, savefig=savefig, path=home/'phd/plots/paper2')


def plot_cut_sublimation(lam='1.3mm', show=True, savefig='', figsize=(8,6)):
    """ Appendix figure.
    """
    
    # Avoid pylab to open a new figure for every call to horizontal_cut()
    plt.rcParams['interactive'] = False

    # Set the path prefixes
    prefix = home/'phd/rhd_disk/evaporation_test/results/dust_emission/' / \
                    'temp_eos/sg/nosubl'
    prefix1 = home/'phd/rhd_disk/evaporation_test/results/dust_emission' / \
                    'temp_eos/sg/subl300K/'

    # Perform horizontal cuts to every map for flipped disk
    obs = utils.horizontal_cut( 
        filename=None, 
        add_obs=True, 
        lam=lam, 
        cut_along='max',
        axis=0, 
        return_data=True, 
        show=False, 
    )
    a100um_nosubl = utils.horizontal_cut( 
        filename=prefix/f'amax100um/{lam}/180deg/dust_scat/data/alma_I.fits', 
        lam=lam, 
        cut_along='max',
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )
    a100um = utils.horizontal_cut( 
        filename=prefix1/f'amax100um/{lam}/180deg/dust_scat/data/alma_I.fits', 
        lam=lam, 
        cut_along='max',
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )
    a200um = utils.horizontal_cut( 
        filename=prefix1/f'amax200um/{lam}/180deg/dust_scat/data/alma_I.fits', 
        lam=lam, 
        cut_along='center',
        align=False,
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )
    a300um = utils.horizontal_cut( 
        filename=prefix1/f'amax300um/{lam}/180deg/dust_scat/data/alma_I.fits', 
        lam=lam, 
        cut_along='center',
        align=False,
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )
    a400um = utils.horizontal_cut( 
        filename=prefix1/f'amax400um/{lam}/180deg/dust_scat/data/alma_I.fits', 
        lam=lam, 
        cut_along='center',
        align=False,
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )
    a500um = utils.horizontal_cut( 
        filename=prefix1/f'amax500um/{lam}/180deg/dust_scat/data/alma_I.fits', 
        lam=lam, 
        cut_along='center',
        align=False,
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )
    a1000um = utils.horizontal_cut( 
        filename=prefix1/f'amax1000um/{lam}/180deg/dust_scat/data/alma_I.fits', 
        lam=lam, 
        cut_along='center',
        align=False,
        axis=0, 
        add_obs=False, 
        return_data=True, 
        show=False, 
    )


    # Close all previously generated figures
    plt.close('all')
    
    # Initialize the figure 
    fig = plt.figure(figsize=figsize)

    # 3rd col
    cmap = ['#f0f9e8','#ccebc5','#a8ddb5','#7bccc4','#43a2ca','#0868ac']
    # 6th col
    cmap = ['#f6eff7','#d0d1e6','#a6bddb','#67a9cf','#1c9099','#016c59']
    cmap = cmap[::-1]

    plt.plot(*a1000um, color=cmap[5], 
        label=r'\noindent$a_{\rm max}$=1000$\mu$m')
    plt.plot(*a500um, color=cmap[4], 
        label=r'\noindent$a_{\rm max}$=500$\mu$m')
    plt.plot(*a400um, color=cmap[3], 
        label=r'\noindent$a_{\rm max}$=400$\mu$m')
    plt.plot(*a300um, color=cmap[2], 
        label=r'\noindent$a_{\rm max}$=300$\mu$m')
    plt.plot(*a200um, color=cmap[1], 
        label=r'\noindent$a_{\rm max}$=200$\mu$m')
    plt.plot(*a100um, color=cmap[0], 
        label=r'\noindent$a_{\rm max}$=100$\mu$m')
    plt.plot(*a100um_nosubl, color=cmap[0], ls='-.', lw=2, 
        label=r'$a_{\rm max}$=100$\mu$m No subl.')
    plt.plot(*obs, color='black', label='IRAS16293B', ls='-.', lw=2)

    plt.annotate(lam, xy=(0.05, 0.9), xycoords='axes fraction', size=20) 

    plt.legend(ncol=1, loc='upper right', fontsize=11)
    plt.xlim(-0.30, 0.30)
    plt.ylim(-20, 380 if lam=='1.3mm' else 710)
    plt.xlabel('Angular offset (arcseconds)')
    plt.ylabel(r'$T_{\rm B}$ (K)')

    return utils.plot_checkout(fig, show, savefig=savefig, path=home/'phd/plots/paper2')
  
