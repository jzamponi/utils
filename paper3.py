"""
    Generate figures for Paper 3
"""
import os
import warnings
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
import astropy.units as u
import astropy.constants as c
from astropy.io import ascii, fits
from astropy.coordinates import SkyCoord
from astropy.nddata.blocks import block_reduce
from pathlib import Path

import utils

home = Path.home()

# Plot directory
plot_dir = home/"phd/plots/paper3"

# Ignore all warnings, usually generated by APLPy
warnings.filterwarnings('ignore')

# Global plot settings
scalebar = 20*u.au


@utils.elapsed_time
def plot_disk_models(a=10, lam='1.3mm', 
        spectral_index=False, tau=False, normalize=False, Tb=True, bmaj=0.045,
        figsize=(13,10), cmap='magma', verbose=False, show=True, savefig=None
    ):

    from astropy.nddata import block_reduce

    plt.rcParams['image.cmap'] = 'magma_r'
    plt.rcParams['axes.labelsize'] = 16
    plt.rcParams['axes.titlesize'] = 16
    stretch = None

    # Create file paths
    cwd = home/'phd/class0disks/results/'
    file = 'synobs_I.fits' if not tau else 'tau.fits'

    if 'radmc3d' in file: 
        Tb = False

    imgpath = lambda m,b,h,l,ii: str(
        cwd/m/'a1'/b/h/f'trad/L2/sg/a{a}um/{l}mm/{ii}deg/lowres'/file)

    # Figure axes
    x = ['75 b0','90 b0','75 b0.5','90 b0.5','75 b1','90 b1']
    y = ['h0.5 m0.3','h0.5 m0.8','h5 m0.3','h5 m0.8','h10 m0.3','h10 m0.8']

    fig, p = plt.subplots(nrows=6, ncols=6, figsize=figsize)

    if spectral_index:
        vmin = 1.7
        vmax = 3.3
        normalize = False
        cmap = 'PuOr' if cmap == 'magma' else cmap
        stretch = 'linear'
    elif tau:
        vmin = 1e-15 if normalize else None
        vmax = 1 if normalize else None
        cmap = 'BuPu_r' if cmap == 'magma' else cmap
        stretch = None
    else:
        cmap = 'magma'
        vmin = 0 if normalize else None
        vmax = 1 if normalize else None

    utils.print_(f'{vmin = }')
    utils.print_(f'{vmax = }')
    utils.print_(f'{stretch = }')
    utils.print_('')
    
    for i, y_ in enumerate(y):
        for j, x_ in enumerate(x):

            ii = x_.split()[0]
            b = x_.split()[1]
            h = y_.split()[0]
            m = y_.split()[1]
            l = lam.strip('mm')
            
            utils.print_(f'panel ({i}, {j}): {imgpath(m,b,h,l,ii)}', verbose)

            try:
                img, hdr = fits.getdata(imgpath(m,b,h,l,ii), header=True)

                if spectral_index:
                    img1, hdr1 = fits.getdata(imgpath(m,b,h,'1.3',ii), header=True)
                    img2, hdr2 = fits.getdata(imgpath(m,b,h,'3',ii), header=True)
                    
                    nu1 = hdr1.get("restfrq")
                    nu2 = hdr2.get("restfrq")
                    img = np.log10(img1 / img2) / np.log10(nu1 / nu2)
                
                no_data = False

                
            except FileNotFoundError as e:
                # If file non existent, display ones
                no_data = True
                img = np.ones((100, 100))
                utils.print_(e, red=True)
                p[i,j].annotate('No data', size=15,  xy=(0.2, 0.45), 
                    xycoords='axes fraction')

            if normalize: 
                img /= img.max()

            if not spectral_index:
                stretch = colors.AsinhNorm(
                    linear_width=np.mean(img), vmin=vmin, vmax=vmax)

            if Tb:
                img = utils.Tb(
                    img, 
                    freq=hdr.get('restfrq') * u.Hz.to(u.GHz),
                    bmaj=bmaj,
                    bmin=bmaj,
                )
                stretch = colors.AsinhNorm(
                    linear_width=np.mean(img), vmin=vmin, vmax=vmax)

            ax = p[i,j].imshow(
                img, 
                cmap=cmap,
                norm=stretch,
                vmin=vmin if stretch == 'linear' else None,
                vmax=vmax if stretch == 'linear' else None,
            )

            if not no_data:
                utils.add_beam(p[i,j], 
                    bmaj=bmaj * eval(hdr.get('DISTANCE').strip('pc')))
            
            if spectral_index:
                p[i,j].contour(img, levels=[2], colors='black', linewidths=0.3)

            p[i,j].set_xticks([])
            p[i,j].set_yticks([])

            cb = fig.colorbar(ax, pad=0.01, shrink=0.95, fraction=0.15)

            if spectral_index:
                cb.set_ticks(ticks=[1.7, 2, 3.3])
            elif normalize:
                cb.set_ticks(ticks=[0, 0.5, 1])
            else:
                cb.set_ticks(ticks=[
                                img.max()], 
                                labels=[f'{img.max():.0f}'] if not no_data else ['']
                )

    p[0,0].set_title(r'$\beta = 0$')
    p[0,1].set_title(r'')
    p[0,2].set_title(r'$\beta = 0.5$')
    p[0,3].set_title(r'')
    p[0,4].set_title(r'$\beta = 1$')
    p[0,5].set_title(r'')
    p[0,0].set_ylabel(r'$H_0 = 0.5$ au')
    p[1,0].set_ylabel(r'')
    p[2,0].set_ylabel(r'$H_0 = 5$ au')
    p[3,0].set_ylabel(r'')
    p[4,0].set_ylabel(r'$H_0 = 10$ au')
    p[5,0].set_ylabel(r'')
    p[0,0].annotate(r'75 deg', xy=(.5, 0.8), ha='center', 
        xycoords='axes fraction', color='black', size=13, bbox={'fc':'white'})
    p[0,1].annotate(r'90 deg', xy=(.5, 0.8), ha='center', 
        xycoords='axes fraction', color='black', size=13, bbox={'fc':'white'})
    p[0,2].annotate(r'75 deg', xy=(.5, 0.8), ha='center', 
        xycoords='axes fraction', color='black', size=13, bbox={'fc':'white'})
    p[0,3].annotate(r'90 deg', xy=(.5, 0.8), ha='center', 
        xycoords='axes fraction', color='black', size=13, bbox={'fc':'white'})
    p[0,4].annotate(r'75 deg', xy=(.5, 0.8), ha='center', 
        xycoords='axes fraction', color='black', size=13, bbox={'fc':'white'})
    p[0,5].annotate(r'90 deg', xy=(.5, 0.8), ha='center', 
        xycoords='axes fraction', color='black', size=13, bbox={'fc':'white'})
    p[0,0].annotate(r'0.3 M$_{\odot}$', xy=(.27, .1), ha='center', 
        xycoords='axes fraction', color='black', size=11, bbox={'fc':'white'})
    p[1,0].annotate(r'0.8 M$_{\odot}$', xy=(.27, .1), ha='center', 
        xycoords='axes fraction', color='black', size=11, bbox={'fc':'white'})
    p[2,0].annotate(r'0.3 M$_{\odot}$', xy=(.27, .1), ha='center', 
        xycoords='axes fraction', color='black', size=11, bbox={'fc':'white'})
    p[3,0].annotate(r'0.8 M$_{\odot}$', xy=(.27, .1), ha='center', 
        xycoords='axes fraction', color='black', size=11, bbox={'fc':'white'})
    p[4,0].annotate(r'0.3 M$_{\odot}$', xy=(.27, .1), ha='center', 
        xycoords='axes fraction', color='black', size=11, bbox={'fc':'white'})
    p[5,0].annotate(r'0.8 M$_{\odot}$', xy=(.27, .1), ha='center', 
        xycoords='axes fraction', color='black', size=11, bbox={'fc':'white'})

    plt.subplots_adjust(hspace=0.1, wspace=0.1)
    plt.tight_layout()

    return utils.plot_checkout(fig, show, savefig=savefig, path=plot_dir)


@utils.elapsed_time
def plot_dust_temperatures(proj='edgeon', a=10, 
        figsize=(15,6.5), cmap='inferno', verbose=False, show=True, savefig=None
    ):

    from astropy.nddata import block_reduce

    plt.rcParams['image.cmap'] = 'magma_r'
    plt.rcParams['axes.labelsize'] = 16
    plt.rcParams['axes.titlesize'] = 16
    stretch = None

    cwd = home/'phd/class0disks/results/'
    file = 'temperature-mc_midplane.fits'
    imgpath = lambda m,b,h: str(
        cwd/m/'a1'/b/h/f'trad/L2/sg/a{a}um/1.3mm/75deg/lowres'/file)

    # Figure axes
    x = ['m0.3 b0','m0.3 b0.5','m0.3 b1','m0.8 b0','m0.8 b0.5','m0.8 b1']
    y = ['h0.5', 'h5', 'h10']

    fig, p = plt.subplots(nrows=3, ncols=6, figsize=figsize)

    for i, y_ in enumerate(y):
        for j, x_ in enumerate(x):

            m = x_.split()[0]
            b = x_.split()[1]
            h = y_

            utils.print_(f'panel ({i}, {j}):  {imgpath(m,b,h)}', verbose)

            try:
                # Read 3D temperature from FITS file
                img = fits.getdata(imgpath(m,b,h))
                nx = img.shape[0]
                no_data = False
    
                # Slice the midplane
                if proj in ['f', 'faceon']:
                    img = img[nx//2, ...]
                elif proj in ['e', 'edgeon']:
                    img = img[..., nx//2]
                
            except FileNotFoundError as e:
                # If file non existent, display ones
                utils.print_(
                    f'No data for: {m = }, {b = }, {h = }', red=True)
                no_data = True
                img = np.ones((nx, nx))
                p[i,j].annotate('No data yet', size=15,  xy=(nx//2,nx//2), ha='center')

            ax = p[i,j].imshow(
                img, 
                cmap=cmap,
                norm=None if no_data else colors.LogNorm(vmin=1,vmax=5e2),
            )

            p[i,j].set_xticks([])
            p[i,j].set_yticks([])

            fig.colorbar(ax, pad=0.01, shrink=0.95, fraction=0.15)

    p[0,0].set_ylabel(r'$H_0=0.5$ au')
    p[1,0].set_ylabel(r'$H_0=5$ au')
    p[2,0].set_ylabel(r'$H_0=10$ au')
    p[0,0].set_title(r'$\beta=0$')
    p[0,1].set_title(r'$\beta=0.5$')
    p[0,2].set_title(r'$\beta=1$')
    p[0,3].set_title(r'$\beta=0$')
    p[0,4].set_title(r'$\beta=0.5$')
    p[0,5].set_title(r'$\beta=1$')
    p[0,0].annotate(r'$M_{\rm dust}=0.3$ M$_{\odot}$', xy=(.05, 0.1), 
        xycoords='axes fraction', color='white', size=13)
    p[0,3].annotate(r'$M_{\rm dust}=0.8$ M$_{\odot}$', xy=(.05, 0.1), 
        xycoords='axes fraction', color='white', size=13)

    plt.subplots_adjust(hspace=0.1, wspace=0.07)
    plt.tight_layout()

    return utils.plot_checkout(fig, show, savefig=savefig, path=plot_dir)
